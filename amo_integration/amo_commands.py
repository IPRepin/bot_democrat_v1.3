"""
–ú–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç—ã —Å AMO CRM
"""
import logging
from datetime import datetime

from amocrm.v2 import Lead as _Lead, custom_field
from amocrm.v2 import Contact
from asgiref.sync import sync_to_async

from amo_integration.connect_api_amo import connect_amo

logger = logging.getLogger(__name__)


class Lead(_Lead):
    """
    –ö–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ê–ú–û
    """
    source_phone = custom_field.TextCustomField("Source_phone")
    rec_date = custom_field.TextCustomField("–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏")
    rec_time = custom_field.TextCustomField("–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏")
    doctor = custom_field.TextCustomField("–§–ò–û –≤—Ä–∞—á–∞")


@sync_to_async()
def add_lead(name: str, phone: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ê–ú–û
    """
    name = f"{name} {phone}"
    connect_amo()
    create_contact = Lead.objects.create(name=name)
    create_contact.source_phone = phone
    logger.info("%s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ê–ú–û", phone)
    create_contact.tags.append("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç")
    create_contact.save()
    logger.info(f"{name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ê–ú–û")


def get_info_patient(phone):
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ê–ú–û
    """
    connect_amo()
    try:
        lead = Lead.objects.get(query=phone)
        if lead:
            return formatting_message(lead)
        contact = Contact.objects.get(query=phone)
        if contact:
            logger.info(contact.phone)
            get_lead_in_contact = Lead.objects.get(contact_id=contact.id)
            if get_lead_in_contact:
                return formatting_message(get_lead_in_contact)
    except StopIteration as error:
        logger.exception(error)
        text_story_recording = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö " \
                               "–ø—Ä–∏–µ–º–æ–≤ –≤ –Ω–∞—à–µ–π –ö–ª–∏–Ω–∏–∫–µ.\n" \
                               "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üåê–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å'"
        return text_story_recording


def formatting_message(patient) -> str:
    date = datetime.fromtimestamp(patient.rec_date).strftime("%d.%m.%Y")
    time_ = patient.rec_time
    doctor = patient.doctor
    return f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã {date} –Ω–∞ {time_} –∫ –¥–æ–∫—Ç–æ—Ä—É {doctor}"


def normalize_time(hour: int, minute: int) -> tuple[int, int]:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
    """
    # –ï—Å–ª–∏ –º–∏–Ω—É—Ç—ã –±–æ–ª—å—à–µ 59, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏–∑–ª–∏—à–µ–∫ –≤ —á–∞—Å—ã
    if minute >= 60:
        extra_hours = minute // 60
        minute = minute % 60
        hour += extra_hours

    # –ï—Å–ª–∏ —á–∞—Å—ã –±–æ–ª—å—à–µ 23, –±–µ—Ä–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 24
    if hour >= 24:
        hour = hour % 24

    return hour, minute


def parse_time(time_str: str) -> tuple[int, int]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    """
    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
    time_str = str(time_str).strip()

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è
    if ',' in time_str:
        time_str = time_str.split(',')[0].strip()

    # –û—á–∏—â–∞–µ–º –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –¥–≤–æ–µ—Ç–æ—á–∏—è
    time_str = ''.join(char for char in time_str if char.isdigit() or char == ':')

    try:
        if ':' in time_str:
            # –§–æ—Ä–º–∞—Ç "15:00"
            time_parts = time_str.split(':')
            hour = int(time_parts[0])
            minute = int(time_parts[1]) if len(time_parts) > 1 else 0
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            if len(time_str) <= 2:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "9" –∏–ª–∏ "15")
                hour = int(time_str)
                minute = 0
            elif len(time_str) <= 4:
                # –§–æ—Ä–º–∞—Ç "1930" –∏–ª–∏ "930"
                time_str = time_str.zfill(4)
                hour = int(time_str[:2])
                minute = int(time_str[2:])
            else:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –ø—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 4 —Ü–∏—Ñ—Ä—ã
                hour = int(time_str[:2])
                minute = int(time_str[2:4])

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
        hour, minute = normalize_time(hour, minute)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {hour}:{minute}")

        return hour, minute

    except (ValueError, IndexError) as e:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è '{time_str}': {str(e)}")


def get_upcoming_appointments() -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ AMO CRM
    """
    connect_amo()
    current_time = datetime.now()
    upcoming_appointments = []

    try:
        leads = Lead.objects.filter()

        for lead in leads:
            if not lead.rec_date or not lead.rec_time:
                continue

            try:
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {lead.id}, –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: {lead.rec_time}")

                hour, minute = parse_time(lead.rec_time)
                logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {lead.id}: {hour:02d}:{minute:02d}")

                appointment_date = datetime.fromtimestamp(lead.rec_date)
                appointment_datetime = appointment_date.replace(
                    hour=hour,
                    minute=minute
                )

                time_diff = appointment_datetime - current_time
                if 2.9 <= time_diff.total_seconds() / 3600 <= 3.1:
                    appointment_info = {
                        'lead_id': lead.id,
                        'name': lead.name,
                        'phone': lead.source_phone,
                        'doctor': lead.doctor,
                        'datetime': appointment_datetime,
                    }
                    upcoming_appointments.append(appointment_info)
                    logger.info(
                        f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞–ø–∏—Å—å: ID={lead.id}, "
                        f"–≤—Ä–µ–º—è={appointment_datetime.strftime('%H:%M')}"
                    )

            except ValueError as e:
                logger.warning(
                    f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {lead.id}: {str(e)}, "
                    f"–∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ={lead.rec_time}"
                )
                continue
            except Exception as e:
                logger.error(
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {lead.id}: {str(e)}, "
                    f"–∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ={lead.rec_time}"
                )
                continue

    except Exception as error:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ AMO: %s", error)

    return upcoming_appointments


@sync_to_async
def update_lead_notification_status(lead_id: int) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ AMO CRM
    """
    connect_amo()
    try:
        lead = Lead.objects.get(lead_id)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        lead.tags.append("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        lead.save()
        logger.info("–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–¥–µ–ª–∫–∏ %s", lead_id)
    except Exception as error:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ AMO: %s", error)