"""
–ú–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç—ã —Å AMO CRM
"""

from datetime import datetime

from amocrm.v2 import Lead as _Lead, custom_field
from amocrm.v2 import Contact
from asgiref.sync import sync_to_async

from amo_integration.connect_api_amo import connect_amo
from data.db_connect import get_session
from utils.logger_settings import logger

from data.patient_request import select_all_patient
from utils.time_formated import parse_time


class Lead(_Lead):
    """
    –ö–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ê–ú–û
    """
    source_phone = custom_field.TextCustomField("Source_phone")
    rec_date = custom_field.TextCustomField("–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏")
    rec_time = custom_field.TextCustomField("–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏")
    doctor = custom_field.TextCustomField("–§–ò–û –≤—Ä–∞—á–∞")
    notification_status = custom_field.SelectCustomField("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º")


@sync_to_async()
def add_lead(name: str, phone: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ê–ú–û
    """
    name = f"{name} {phone}"
    connect_amo()
    create_contact = Lead.objects.create(name=name)
    create_contact.source_phone = phone
    logger.info("%s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ê–ú–û", phone)
    create_contact.tags.append("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç")
    create_contact.save()
    logger.info(f"{name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ê–ú–û")


def post_msg_patient(phone):
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ê–ú–û
    """
    connect_amo()

    lead = get_lead(phone)
    if lead:
        return formatting_message(lead)

    text_story_recording = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö " \
                           "–ø—Ä–∏–µ–º–æ–≤ –≤ –Ω–∞—à–µ–π –ö–ª–∏–Ω–∏–∫–µ.\n" \
                           "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üåê–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å'"
    return text_story_recording


def formatting_message(patient) -> str:
    date = datetime.fromtimestamp(patient.rec_date).strftime("%d.%m.%Y")
    time_ = patient.rec_time
    doctor = patient.doctor
    return f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã {date} –Ω–∞ {time_} –∫ –¥–æ–∫—Ç–æ—Ä—É {doctor}"


def get_lead(phone):
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –ê–ú–û
    """
    connect_amo()
    try:
        lead = Lead.objects.get(query=phone)
        if lead:
            return lead
        contact = Contact.objects.get(query=phone)
        if contact:
            get_lead_in_contact = Lead.objects.get(contact_id=contact.id)
            return get_lead_in_contact
    except StopIteration as error:
        logger.info(f"–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ - {error}")


async def get_upcoming_appointments() -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ AMO CRM
    """
    connect_amo()
    current_time = datetime.now()
    upcoming_appointments = []

    try:
        async for session in get_session():
            leads = await select_all_patient(session=session)
            for lead in leads:
                phone = lead.phone
                patient = get_lead(phone)
                if patient is None:
                    logger.info(f"–ü–∞—Ü–∏–µ–Ω—Ç {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AMO")
                    return []
                try:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {lead.id}, –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: {patient.rec_time}")

                    hour, minute = parse_time(patient.rec_time)
                    logger.info(f"–í—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {lead.id}: {hour:02d}:{minute:02d}")

                    appointment_date = datetime.fromtimestamp(patient.rec_date)
                    appointment_datetime = appointment_date.replace(
                        hour=hour,
                        minute=minute
                    )

                    time_diff = appointment_datetime - current_time
                    hours_remaining = time_diff.total_seconds() / 3600

                    if 2 <= hours_remaining <= 3:
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞–ø–∏—Å—å: {lead.id}")
                        appointment_info = {
                            'lead_id': patient.id,
                            'name': patient.name,
                            'phone': patient.source_phone,
                            'doctor': patient.doctor,
                            'datetime': appointment_datetime,
                        }
                        upcoming_appointments.append(appointment_info)
                        logger.info(
                            f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞–ø–∏—Å—å: ID={patient.id}, "
                            f"–≤—Ä–µ–º—è={appointment_datetime.strftime('%H:%M')}"
                        )

                except ValueError as e:
                    logger.warning(
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {patient.id}: {str(e)}, "
                        f"–∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ={patient.rec_time}"
                    )
                    continue
                except Exception as e:
                    logger.error(
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {patient.id}: {str(e)}, "
                        f"–∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ={patient.rec_time}"
                    )
                    continue

    except Exception as error:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ AMO: %s", error)

    return upcoming_appointments


@sync_to_async
def update_lead_notification_status(lead_id: int) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ AMO CRM
    """
    connect_amo()
    try:
        lead = Lead.objects.get(lead_id)
        print(lead.notification_status)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        lead.notification_status = True
        lead.save()
        logger.info("–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–¥–µ–ª–∫–∏ %s", lead_id)
    except Exception as error:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ AMO: %s", error)
