import logging
from datetime import datetime

from aiogram import types, Router, F

from amo_integration.amo_commands import info
from data.sqlite_db_patient import DatabasePatient
from keyboards.inline import (not_entries_keyboard,
                              online_entries_keyboard,
                              review_clinic_keyboard,
                              taxi_keyboard)
from keyboards.inline_kb_stocks import choosing_promotion_keyboards
from keyboards.replay import main_markup

logger = logging.getLogger(__name__)

main_users_router = Router()
db_patient = DatabasePatient()

"""–§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""


@main_users_router.message(F.text == "üí´–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏")
async def stocks(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏
    """
    menu = await choosing_promotion_keyboards()
    new_date = datetime.now()
    now_date = new_date.strftime("%d.%m.%Y")
    await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –Ω–∞ {now_date}:\n",
                         reply_markup=menu
                         )


@main_users_router.message(F.text == "‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")
async def recording(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
    """
    await message.answer(
        f"{message.from_user.first_name}\n"
        "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É\n"
        "'üåê–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å'\n"
        "–∏–ª–∏\n"
        "'üì≤–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º'\n",
        reply_markup=online_entries_keyboard,
    )


@main_users_router.message(F.text == "üìë–í–∞—à–∏ –∑–∞–ø–∏—Å–∏")
async def story_recording(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ –∑–∞–ø–∏—Å–∏
    """
    try:
        patient = db_patient.select_patient(user_id=message.from_user.id)
        phone = patient[2]
        logger.info(f"phone: {phone}")
        if phone:
            msg = info(phone)
            await message.answer(msg, reply_markup=online_entries_keyboard)
        else:
            await message.answer(
                f"{message.from_user.first_name}\n"
                f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö \
                –ø—Ä–∏–µ–º–æ–≤ –≤ –Ω–∞—à–µ–π –ö–ª–∏–Ω–∏–∫–µ.\n"
                "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì≤–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º'",
                reply_markup=not_entries_keyboard,
            )
    except TypeError as e:
        logger.error(e)
        await message.answer(
            f"{message.from_user.first_name}\n"
            f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö \
                        –ø—Ä–∏–µ–º–æ–≤ –≤ –Ω–∞—à–µ–π –ö–ª–∏–Ω–∏–∫–µ.\n"
            "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì≤–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º'",
            reply_markup=not_entries_keyboard,
        )


@main_users_router.message(F.text == "üöï–ö–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å?")
async def taxi(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏
    """
    logger.info("–í—ã–∑–æ–≤ —Ç–∞–∫—Å–∏")
    await message.answer(
        f"{message.from_user.first_name}\n"
        f"–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n"
        f"*****\n"
        f"üìç–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥,\n"
        f"–ø—Ä-–∫—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥ 118\n"
        f"*****\n"
        f"–î–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n",
        reply_markup=taxi_keyboard
    )


@main_users_router.message(F.text == "ü§©–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def review_clinic(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ü§©–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
    """
    text_discount = "<b>–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n</b>"

    await message.answer(
        f"{message.from_user.first_name}\n" f"{text_discount}",
        reply_markup=review_clinic_keyboard,
    )


@main_users_router.callback_query(F.data == "cancel")
async def cancel_callback_query(call: types.CallbackQuery) -> None:
    await call.answer(cache_time=60)
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ", reply_markup=main_markup)
