import asyncio
import logging
from datetime import datetime

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.exc import IntegrityError

from amo_integration.amo_commands import get_info_patient
from data.db_connect import get_session

from data.patient_request import get_patient, update_patient, add_patient

from keyboards.user_keyboards.main_user_keyboards import (not_entries_keyboard,
                                                          online_entries_keyboard,
                                                          review_clinic_keyboard,
                                                          taxi_keyboard)
from keyboards.admin_keyboards.inline_kb_stocks import choosing_promotion_keyboards
from keyboards.main_replay_keyboards import main_markup
from utils.states import AddPhoneNumber

logger = logging.getLogger(__name__)

main_users_router = Router()

"""–§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""


@main_users_router.message(F.text == "üí´–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏")
async def stocks(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏
    """
    menu = await choosing_promotion_keyboards()
    new_date = datetime.now()
    now_date = new_date.strftime("%d.%m.%Y")
    await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –Ω–∞ {now_date}:\n",
                         reply_markup=menu
                         )


@main_users_router.message(F.text == "‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")
async def recording(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
    """
    await message.answer(
        f"{message.from_user.first_name}\n"
        "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É\n"
        "'üåê–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å'\n"
        "–∏–ª–∏\n"
        "'üì≤–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º'\n",
        reply_markup=online_entries_keyboard,
    )


@main_users_router.message(F.text == "üìë–í–∞—à–∏ –∑–∞–ø–∏—Å–∏")
async def story_recording(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ –∑–∞–ø–∏—Å–∏
    """
    try:
        async for session in get_session():
            patient = await get_patient(session=session, user_id=message.from_user.id)
        if patient:
            phone = patient.phone
            logger.info(f"phone: {phone}")
            msg = get_info_patient(phone)
            await message.answer(msg, reply_markup=online_entries_keyboard)
        else:
            await message.answer(
                f"{message.from_user.first_name}\n"
                f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö \
                –ø—Ä–∏–µ–º–æ–≤ –≤ –Ω–∞—à–µ–π –ö–ª–∏–Ω–∏–∫–µ.\n"
                "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì≤–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º'",
                reply_markup=not_entries_keyboard,
            )
    except TypeError as e:
        logger.error(e)
        await message.answer(
            f"{message.from_user.first_name}\n"
            f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö \
                        –ø—Ä–∏–µ–º–æ–≤ –≤ –Ω–∞—à–µ–π –ö–ª–∏–Ω–∏–∫–µ.\n"
            "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì≤–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º'",
            reply_markup=not_entries_keyboard,
        )


@main_users_router.message(F.text == "üöï–ö–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å?")
async def taxi(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏
    """
    logger.info("–í—ã–∑–æ–≤ —Ç–∞–∫—Å–∏")
    await message.answer(
        f"{message.from_user.first_name}\n"
        f"–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n"
        f"*****\n"
        f"üìç–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥,\n"
        f"–ø—Ä-–∫—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥ 118\n"
        f"*****\n"
        f"–î–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n",
        reply_markup=taxi_keyboard
    )


@main_users_router.message(F.text == "ü§©–ü–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã")
async def review_clinic(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ü§©–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
    """
    text_discount = "<b>–†–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤\n</b>"

    await message.answer(
        f"{message.from_user.first_name}\n" f"{text_discount}",
        reply_markup=review_clinic_keyboard,
    )


@main_users_router.callback_query(F.data == "add_phone")
async def add_phone(call: types.CallbackQuery, state: FSMContext) -> None:
    waiting_text = (
        "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ,\n"
        "–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É\n"
        "'–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'"
    )
    await call.message.answer("–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –∫ –¥–æ–∫—Ç–æ—Ä—É")
    await call.answer()
    await state.set_state(AddPhoneNumber.PHONE)
    await asyncio.sleep(40)
    if await state.get_state() == "AddPhoneNumber.PHONE":
        await call.message.answer(waiting_text, reply_markup=main_markup)
        await state.clear()



@main_users_router.message(AddPhoneNumber.PHONE)
async def add_phone_from_db(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    phone = data.get("formatted_phone")  # –ë–µ—Ä–µ–º —É–∂–µ –æ—Ç–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    try:
        async for session in get_session():
            patient = await get_patient(session=session, user_id=message.from_user.id)
            if patient:
                await update_patient(
                    session=session,
                    user_name=message.from_user.first_name,
                    phone=phone,
                    user_id=message.from_user.id
                )
            else:
                await add_patient(
                    session=session,
                    user_name=message.from_user.first_name,
                    phone=phone,
                    user_id=message.from_user.id
                )

        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–µ–π –Ω–∞–∂–º–∏—Ç–µ 'üìë–í–∞—à–∏ –∑–∞–ø–∏—Å–∏'",
                             reply_markup=main_markup)
    except IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    except ConnectionRefusedError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await state.clear()




@main_users_router.callback_query(F.data == "cancel")
async def cancel_callback_query(call: types.CallbackQuery) -> None:
    await call.answer(cache_time=60)
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ", reply_markup=main_markup)
